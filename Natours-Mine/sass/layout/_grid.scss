@use "../abstracts/variables" as variables;
@use "../abstracts/mixins" as mixins;
@use "../abstracts/functions" as functions;

.row {
  max-width: variables.$grid-width;
  // width: min(100% - 6rem, variables.$grid-width);
  margin-inline: auto;
  // // instead of clearfix
  // display: flow-root;

  @include mixins.respond(tab-port) {
    max-width: 50rem;
    padding-inline: 3rem;
  }

  &:not(:last-child) {
    margin-bottom: variables.$gutter-vertical;

    @include mixins.respond(tab-port) {
      margin-bottom: variables.$gutter-vertical-small;
    }
  }

  @include mixins.clearfix;

  [class^="col-"] {
    float: left;

    &:not(:last-child) {
      margin-right: variables.$gutter-horizontal;

      @include mixins.respond(tab-port) {
        margin-right: 0 !important;
        margin-bottom: variables.$gutter-vertical-small;
      }
    }

    @include mixins.respond(tab-port) {
      width: 100% !important;
    }
  }

  .col {
    // SIMPLE
    &-1-of {
      &-2 {
        width: functions.gridWidthCalc(1, 2);
        // @include mixins.gridWidthCalc(1, 2);
      }
      &-3 {
        width: functions.gridWidthCalc(1, 3);
        // @include mixins.gridWidthCalc(1, 3);
      }
      &-4 {
        width: functions.gridWidthCalc(1, 4);
        // @include mixins.gridWidthCalc(1, 4);
      }
    }

    &-2-of {
      &-3 {
        width: functions.gridWidthCalc(2, 3);
        // @include mixins.gridWidthCalc(2, 3);
      }

      &-4 {
        width: functions.gridWidthCalc(2, 4);
        // @include mixins.gridWidthCalc(2, 4);
      }
    }

    &-3-of {
      &-4 {
        width: functions.gridWidthCalc(3, 4);
        // @include mixins.gridWidthCalc(3, 4);
      }
    }
  }
}
